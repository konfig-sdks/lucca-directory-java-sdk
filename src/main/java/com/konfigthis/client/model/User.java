/*
 * Directory-v3
 * Welcome on the documentation for the Directory v3 API. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.UserApplicationData;
import com.konfigthis.client.model.UserCalendar;
import com.konfigthis.client.model.UserCulture;
import com.konfigthis.client.model.UserDepartment;
import com.konfigthis.client.model.UserHabilitedRolesInner;
import com.konfigthis.client.model.UserLegalEntity;
import com.konfigthis.client.model.UserManager;
import com.konfigthis.client.model.UserPicture;
import com.konfigthis.client.model.UserRolePrincipal;
import com.konfigthis.client.model.UserUserWorkCyclesInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * 
 */
@ApiModel(description = "")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class User {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Double id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_MODIFIED_ON = "modifiedOn";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ON)
  private String modifiedOn;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_MAIL = "mail";
  @SerializedName(SERIALIZED_NAME_MAIL)
  private String mail;

  public static final String SERIALIZED_NAME_DT_CONTRACT_START = "dtContractStart";
  @SerializedName(SERIALIZED_NAME_DT_CONTRACT_START)
  private String dtContractStart;

  public static final String SERIALIZED_NAME_DT_CONTRACT_END = "dtContractEnd";
  @SerializedName(SERIALIZED_NAME_DT_CONTRACT_END)
  private Object dtContractEnd = null;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private String birthDate;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employeeNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private String employeeNumber;

  public static final String SERIALIZED_NAME_CALENDAR = "calendar";
  @SerializedName(SERIALIZED_NAME_CALENDAR)
  private UserCalendar calendar;

  public static final String SERIALIZED_NAME_CULTURE = "culture";
  @SerializedName(SERIALIZED_NAME_CULTURE)
  private UserCulture culture;

  public static final String SERIALIZED_NAME_PICTURE = "picture";
  @SerializedName(SERIALIZED_NAME_PICTURE)
  private UserPicture picture;

  public static final String SERIALIZED_NAME_APPLICATION_DATA = "applicationData";
  @SerializedName(SERIALIZED_NAME_APPLICATION_DATA)
  private UserApplicationData applicationData;

  public static final String SERIALIZED_NAME_LEGAL_ENTITY = "legalEntity";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY)
  private UserLegalEntity legalEntity;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private UserDepartment department;

  public static final String SERIALIZED_NAME_MANAGER = "manager";
  @SerializedName(SERIALIZED_NAME_MANAGER)
  private UserManager manager;

  public static final String SERIALIZED_NAME_ROLE_PRINCIPAL = "rolePrincipal";
  @SerializedName(SERIALIZED_NAME_ROLE_PRINCIPAL)
  private UserRolePrincipal rolePrincipal;

  public static final String SERIALIZED_NAME_HABILITED_ROLES = "habilitedRoles";
  @SerializedName(SERIALIZED_NAME_HABILITED_ROLES)
  private Set<UserHabilitedRolesInner> habilitedRoles = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_USER_WORK_CYCLES = "userWorkCycles";
  @SerializedName(SERIALIZED_NAME_USER_WORK_CYCLES)
  private Set<UserUserWorkCyclesInner> userWorkCycles = new LinkedHashSet<>();

  public User() {
  }

  public User id(Double id) {
    
    
    
    
    this.id = id;
    return this;
  }

  public User id(Integer id) {
    
    
    
    
    this.id = id.doubleValue();
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "416", required = true, value = "")

  public Double getId() {
    return id;
  }


  public void setId(Double id) {
    
    
    
    this.id = id;
  }


  public User name(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "John Doe", required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    this.name = name;
  }


  public User url(String url) {
    
    
    if (url != null && url.length() < 1) {
      throw new IllegalArgumentException("Invalid value for url. Length must be greater than or equal to 1.");
    }
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "http://lucca.test/api/users/1", required = true, value = "")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    if (url != null && url.length() < 1) {
      throw new IllegalArgumentException("Invalid value for url. Length must be greater than or equal to 1.");
    }
    this.url = url;
  }


  public User displayName(String displayName) {
    
    
    if (displayName != null && displayName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for displayName. Length must be greater than or equal to 1.");
    }
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Doe John", required = true, value = "")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    
    
    if (displayName != null && displayName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for displayName. Length must be greater than or equal to 1.");
    }
    this.displayName = displayName;
  }


  public User modifiedOn(String modifiedOn) {
    
    
    if (modifiedOn != null && modifiedOn.length() < 1) {
      throw new IllegalArgumentException("Invalid value for modifiedOn. Length must be greater than or equal to 1.");
    }
    
    this.modifiedOn = modifiedOn;
    return this;
  }

   /**
   * Get modifiedOn
   * @return modifiedOn
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2015-09-07T10:20:06.583", required = true, value = "")

  public String getModifiedOn() {
    return modifiedOn;
  }


  public void setModifiedOn(String modifiedOn) {
    
    
    if (modifiedOn != null && modifiedOn.length() < 1) {
      throw new IllegalArgumentException("Invalid value for modifiedOn. Length must be greater than or equal to 1.");
    }
    this.modifiedOn = modifiedOn;
  }


  public User lastName(String lastName) {
    
    
    if (lastName != null && lastName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for lastName. Length must be greater than or equal to 1.");
    }
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "DOE", required = true, value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    if (lastName != null && lastName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for lastName. Length must be greater than or equal to 1.");
    }
    this.lastName = lastName;
  }


  public User firstName(String firstName) {
    
    
    if (firstName != null && firstName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for firstName. Length must be greater than or equal to 1.");
    }
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "John", required = true, value = "")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    if (firstName != null && firstName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for firstName. Length must be greater than or equal to 1.");
    }
    this.firstName = firstName;
  }


  public User login(String login) {
    
    
    if (login != null && login.length() < 1) {
      throw new IllegalArgumentException("Invalid value for login. Length must be greater than or equal to 1.");
    }
    
    this.login = login;
    return this;
  }

   /**
   * Get login
   * @return login
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "jdoe", required = true, value = "")

  public String getLogin() {
    return login;
  }


  public void setLogin(String login) {
    
    
    if (login != null && login.length() < 1) {
      throw new IllegalArgumentException("Invalid value for login. Length must be greater than or equal to 1.");
    }
    this.login = login;
  }


  public User mail(String mail) {
    
    
    if (mail != null && mail.length() < 1) {
      throw new IllegalArgumentException("Invalid value for mail. Length must be greater than or equal to 1.");
    }
    
    this.mail = mail;
    return this;
  }

   /**
   * Get mail
   * @return mail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "no-reply@lucca.fr", required = true, value = "")

  public String getMail() {
    return mail;
  }


  public void setMail(String mail) {
    
    
    if (mail != null && mail.length() < 1) {
      throw new IllegalArgumentException("Invalid value for mail. Length must be greater than or equal to 1.");
    }
    this.mail = mail;
  }


  public User dtContractStart(String dtContractStart) {
    
    
    if (dtContractStart != null && dtContractStart.length() < 1) {
      throw new IllegalArgumentException("Invalid value for dtContractStart. Length must be greater than or equal to 1.");
    }
    
    this.dtContractStart = dtContractStart;
    return this;
  }

   /**
   * Get dtContractStart
   * @return dtContractStart
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2014-09-01T00:00:00", required = true, value = "")

  public String getDtContractStart() {
    return dtContractStart;
  }


  public void setDtContractStart(String dtContractStart) {
    
    
    if (dtContractStart != null && dtContractStart.length() < 1) {
      throw new IllegalArgumentException("Invalid value for dtContractStart. Length must be greater than or equal to 1.");
    }
    this.dtContractStart = dtContractStart;
  }


  public User dtContractEnd(Object dtContractEnd) {
    
    
    
    
    this.dtContractEnd = dtContractEnd;
    return this;
  }

   /**
   * Get dtContractEnd
   * @return dtContractEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getDtContractEnd() {
    return dtContractEnd;
  }


  public void setDtContractEnd(Object dtContractEnd) {
    
    
    
    this.dtContractEnd = dtContractEnd;
  }


  public User birthDate(String birthDate) {
    
    
    if (birthDate != null && birthDate.length() < 1) {
      throw new IllegalArgumentException("Invalid value for birthDate. Length must be greater than or equal to 1.");
    }
    
    this.birthDate = birthDate;
    return this;
  }

   /**
   * Get birthDate
   * @return birthDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1989-12-22T00:00:00", required = true, value = "")

  public String getBirthDate() {
    return birthDate;
  }


  public void setBirthDate(String birthDate) {
    
    
    if (birthDate != null && birthDate.length() < 1) {
      throw new IllegalArgumentException("Invalid value for birthDate. Length must be greater than or equal to 1.");
    }
    this.birthDate = birthDate;
  }


  public User employeeNumber(String employeeNumber) {
    
    
    if (employeeNumber != null && employeeNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for employeeNumber. Length must be greater than or equal to 1.");
    }
    
    this.employeeNumber = employeeNumber;
    return this;
  }

   /**
   * Get employeeNumber
   * @return employeeNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "00057", required = true, value = "")

  public String getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(String employeeNumber) {
    
    
    if (employeeNumber != null && employeeNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for employeeNumber. Length must be greater than or equal to 1.");
    }
    this.employeeNumber = employeeNumber;
  }


  public User calendar(UserCalendar calendar) {
    
    
    
    
    this.calendar = calendar;
    return this;
  }

   /**
   * Get calendar
   * @return calendar
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UserCalendar getCalendar() {
    return calendar;
  }


  public void setCalendar(UserCalendar calendar) {
    
    
    
    this.calendar = calendar;
  }


  public User culture(UserCulture culture) {
    
    
    
    
    this.culture = culture;
    return this;
  }

   /**
   * Get culture
   * @return culture
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UserCulture getCulture() {
    return culture;
  }


  public void setCulture(UserCulture culture) {
    
    
    
    this.culture = culture;
  }


  public User picture(UserPicture picture) {
    
    
    
    
    this.picture = picture;
    return this;
  }

   /**
   * Get picture
   * @return picture
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UserPicture getPicture() {
    return picture;
  }


  public void setPicture(UserPicture picture) {
    
    
    
    this.picture = picture;
  }


  public User applicationData(UserApplicationData applicationData) {
    
    
    
    
    this.applicationData = applicationData;
    return this;
  }

   /**
   * Get applicationData
   * @return applicationData
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UserApplicationData getApplicationData() {
    return applicationData;
  }


  public void setApplicationData(UserApplicationData applicationData) {
    
    
    
    this.applicationData = applicationData;
  }


  public User legalEntity(UserLegalEntity legalEntity) {
    
    
    
    
    this.legalEntity = legalEntity;
    return this;
  }

   /**
   * Get legalEntity
   * @return legalEntity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UserLegalEntity getLegalEntity() {
    return legalEntity;
  }


  public void setLegalEntity(UserLegalEntity legalEntity) {
    
    
    
    this.legalEntity = legalEntity;
  }


  public User department(UserDepartment department) {
    
    
    
    
    this.department = department;
    return this;
  }

   /**
   * Get department
   * @return department
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UserDepartment getDepartment() {
    return department;
  }


  public void setDepartment(UserDepartment department) {
    
    
    
    this.department = department;
  }


  public User manager(UserManager manager) {
    
    
    
    
    this.manager = manager;
    return this;
  }

   /**
   * Get manager
   * @return manager
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UserManager getManager() {
    return manager;
  }


  public void setManager(UserManager manager) {
    
    
    
    this.manager = manager;
  }


  public User rolePrincipal(UserRolePrincipal rolePrincipal) {
    
    
    
    
    this.rolePrincipal = rolePrincipal;
    return this;
  }

   /**
   * Get rolePrincipal
   * @return rolePrincipal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UserRolePrincipal getRolePrincipal() {
    return rolePrincipal;
  }


  public void setRolePrincipal(UserRolePrincipal rolePrincipal) {
    
    
    
    this.rolePrincipal = rolePrincipal;
  }


  public User habilitedRoles(Set<UserHabilitedRolesInner> habilitedRoles) {
    
    
    
    
    this.habilitedRoles = habilitedRoles;
    return this;
  }

  public User addHabilitedRolesItem(UserHabilitedRolesInner habilitedRolesItem) {
    this.habilitedRoles.add(habilitedRolesItem);
    return this;
  }

   /**
   * Get habilitedRoles
   * @return habilitedRoles
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Set<UserHabilitedRolesInner> getHabilitedRoles() {
    return habilitedRoles;
  }


  public void setHabilitedRoles(Set<UserHabilitedRolesInner> habilitedRoles) {
    
    
    
    this.habilitedRoles = habilitedRoles;
  }


  public User userWorkCycles(Set<UserUserWorkCyclesInner> userWorkCycles) {
    
    
    
    
    this.userWorkCycles = userWorkCycles;
    return this;
  }

  public User addUserWorkCyclesItem(UserUserWorkCyclesInner userWorkCyclesItem) {
    this.userWorkCycles.add(userWorkCyclesItem);
    return this;
  }

   /**
   * Get userWorkCycles
   * @return userWorkCycles
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Set<UserUserWorkCyclesInner> getUserWorkCycles() {
    return userWorkCycles;
  }


  public void setUserWorkCycles(Set<UserUserWorkCyclesInner> userWorkCycles) {
    
    
    
    this.userWorkCycles = userWorkCycles;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the User instance itself
   */
  public User putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.id, user.id) &&
        Objects.equals(this.name, user.name) &&
        Objects.equals(this.url, user.url) &&
        Objects.equals(this.displayName, user.displayName) &&
        Objects.equals(this.modifiedOn, user.modifiedOn) &&
        Objects.equals(this.lastName, user.lastName) &&
        Objects.equals(this.firstName, user.firstName) &&
        Objects.equals(this.login, user.login) &&
        Objects.equals(this.mail, user.mail) &&
        Objects.equals(this.dtContractStart, user.dtContractStart) &&
        Objects.equals(this.dtContractEnd, user.dtContractEnd) &&
        Objects.equals(this.birthDate, user.birthDate) &&
        Objects.equals(this.employeeNumber, user.employeeNumber) &&
        Objects.equals(this.calendar, user.calendar) &&
        Objects.equals(this.culture, user.culture) &&
        Objects.equals(this.picture, user.picture) &&
        Objects.equals(this.applicationData, user.applicationData) &&
        Objects.equals(this.legalEntity, user.legalEntity) &&
        Objects.equals(this.department, user.department) &&
        Objects.equals(this.manager, user.manager) &&
        Objects.equals(this.rolePrincipal, user.rolePrincipal) &&
        Objects.equals(this.habilitedRoles, user.habilitedRoles) &&
        Objects.equals(this.userWorkCycles, user.userWorkCycles)&&
        Objects.equals(this.additionalProperties, user.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, url, displayName, modifiedOn, lastName, firstName, login, mail, dtContractStart, dtContractEnd, birthDate, employeeNumber, calendar, culture, picture, applicationData, legalEntity, department, manager, rolePrincipal, habilitedRoles, userWorkCycles, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    mail: ").append(toIndentedString(mail)).append("\n");
    sb.append("    dtContractStart: ").append(toIndentedString(dtContractStart)).append("\n");
    sb.append("    dtContractEnd: ").append(toIndentedString(dtContractEnd)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    calendar: ").append(toIndentedString(calendar)).append("\n");
    sb.append("    culture: ").append(toIndentedString(culture)).append("\n");
    sb.append("    picture: ").append(toIndentedString(picture)).append("\n");
    sb.append("    applicationData: ").append(toIndentedString(applicationData)).append("\n");
    sb.append("    legalEntity: ").append(toIndentedString(legalEntity)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    manager: ").append(toIndentedString(manager)).append("\n");
    sb.append("    rolePrincipal: ").append(toIndentedString(rolePrincipal)).append("\n");
    sb.append("    habilitedRoles: ").append(toIndentedString(habilitedRoles)).append("\n");
    sb.append("    userWorkCycles: ").append(toIndentedString(userWorkCycles)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("url");
    openapiFields.add("displayName");
    openapiFields.add("modifiedOn");
    openapiFields.add("lastName");
    openapiFields.add("firstName");
    openapiFields.add("login");
    openapiFields.add("mail");
    openapiFields.add("dtContractStart");
    openapiFields.add("dtContractEnd");
    openapiFields.add("birthDate");
    openapiFields.add("employeeNumber");
    openapiFields.add("calendar");
    openapiFields.add("culture");
    openapiFields.add("picture");
    openapiFields.add("applicationData");
    openapiFields.add("legalEntity");
    openapiFields.add("department");
    openapiFields.add("manager");
    openapiFields.add("rolePrincipal");
    openapiFields.add("habilitedRoles");
    openapiFields.add("userWorkCycles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("modifiedOn");
    openapiRequiredFields.add("lastName");
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("login");
    openapiRequiredFields.add("mail");
    openapiRequiredFields.add("dtContractStart");
    openapiRequiredFields.add("birthDate");
    openapiRequiredFields.add("employeeNumber");
    openapiRequiredFields.add("calendar");
    openapiRequiredFields.add("culture");
    openapiRequiredFields.add("picture");
    openapiRequiredFields.add("applicationData");
    openapiRequiredFields.add("legalEntity");
    openapiRequiredFields.add("department");
    openapiRequiredFields.add("manager");
    openapiRequiredFields.add("rolePrincipal");
    openapiRequiredFields.add("habilitedRoles");
    openapiRequiredFields.add("userWorkCycles");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to User
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!User.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : User.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("modifiedOn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedOn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedOn").toString()));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      if (!jsonObj.get("mail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mail").toString()));
      }
      if (!jsonObj.get("dtContractStart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dtContractStart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dtContractStart").toString()));
      }
      if (!jsonObj.get("birthDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthDate").toString()));
      }
      if (!jsonObj.get("employeeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeNumber").toString()));
      }
      // validate the required field `calendar`
      UserCalendar.validateJsonObject(jsonObj.getAsJsonObject("calendar"));
      // validate the required field `culture`
      UserCulture.validateJsonObject(jsonObj.getAsJsonObject("culture"));
      // validate the required field `picture`
      UserPicture.validateJsonObject(jsonObj.getAsJsonObject("picture"));
      // validate the required field `applicationData`
      UserApplicationData.validateJsonObject(jsonObj.getAsJsonObject("applicationData"));
      // validate the required field `legalEntity`
      UserLegalEntity.validateJsonObject(jsonObj.getAsJsonObject("legalEntity"));
      // validate the required field `department`
      UserDepartment.validateJsonObject(jsonObj.getAsJsonObject("department"));
      // validate the required field `manager`
      UserManager.validateJsonObject(jsonObj.getAsJsonObject("manager"));
      // validate the required field `rolePrincipal`
      UserRolePrincipal.validateJsonObject(jsonObj.getAsJsonObject("rolePrincipal"));
      // ensure the json data is an array
      if (!jsonObj.get("habilitedRoles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `habilitedRoles` to be an array in the JSON string but got `%s`", jsonObj.get("habilitedRoles").toString()));
      }

      JsonArray jsonArrayhabilitedRoles = jsonObj.getAsJsonArray("habilitedRoles");
      // validate the required field `habilitedRoles` (array)
      for (int i = 0; i < jsonArrayhabilitedRoles.size(); i++) {
        UserHabilitedRolesInner.validateJsonObject(jsonArrayhabilitedRoles.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("userWorkCycles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `userWorkCycles` to be an array in the JSON string but got `%s`", jsonObj.get("userWorkCycles").toString()));
      }

      JsonArray jsonArrayuserWorkCycles = jsonObj.getAsJsonArray("userWorkCycles");
      // validate the required field `userWorkCycles` (array)
      for (int i = 0; i < jsonArrayuserWorkCycles.size(); i++) {
        UserUserWorkCyclesInner.validateJsonObject(jsonArrayuserWorkCycles.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             User instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of User given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of User
  * @throws IOException if the JSON string is invalid with respect to User
  */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

 /**
  * Convert an instance of User to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

