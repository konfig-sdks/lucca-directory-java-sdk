/*
 * Directory-v3
 * Welcome on the documentation for the Directory v3 API. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ModelNull;
import com.konfigthis.client.model.UsersCreateNewUserResponse;
import com.konfigthis.client.model.UsersGetByIdResponse;
import com.konfigthis.client.model.UsersListExcludedFormerResponse;
import com.konfigthis.client.model.UsersUpdateByIdRequest;
import com.konfigthis.client.model.UsersUpdateByIdRequestHabilitedRolesInner;
import com.konfigthis.client.model.UsersUpdateByIdRequestUserWorkCyclesInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorization() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorization(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewUserCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewUserValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return createNewUserCall(_callback);

    }


    private ApiResponse<UsersCreateNewUserResponse> createNewUserWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createNewUserValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UsersCreateNewUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewUserAsync(final ApiCallback<UsersCreateNewUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewUserValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UsersCreateNewUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewUserRequestBuilder {

        private CreateNewUserRequestBuilder() {
        }

        /**
         * Build call for createNewUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createNewUserCall(_callback);
        }


        /**
         * Execute createNewUser request
         * @return UsersCreateNewUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public UsersCreateNewUserResponse execute() throws ApiException {
            ApiResponse<UsersCreateNewUserResponse> localVarResp = createNewUserWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewUser request with HTTP info returned
         * @return ApiResponse&lt;UsersCreateNewUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersCreateNewUserResponse> executeWithHttpInfo() throws ApiException {
            return createNewUserWithHttpInfo();
        }

        /**
         * Execute createNewUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersCreateNewUserResponse> _callback) throws ApiException {
            return createNewUserAsync(_callback);
        }
    }

    /**
     * Create a new User
     * 
     * @return CreateNewUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewUserRequestBuilder createNewUser() throws IllegalArgumentException {
        return new CreateNewUserRequestBuilder();
    }
    private okhttp3.Call getByIdCall(String userId, List<Object> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String userId, List<Object> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getById(Async)");
        }

        return getByIdCall(userId, fields, _callback);

    }


    private ApiResponse<UsersGetByIdResponse> getByIdWithHttpInfo(String userId, List<Object> fields) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(userId, fields, null);
        Type localVarReturnType = new TypeToken<UsersGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String userId, List<Object> fields, final ApiCallback<UsersGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(userId, fields, _callback);
        Type localVarReturnType = new TypeToken<UsersGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String userId;
        private List<Object> fields;

        private GetByIdRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set fields
         * @param fields Comma-separated list of fields of the user to include in responses. Extended data can be retrieved with &#x60;?fields&#x3D;extendedData&#x60;.  (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder fields(List<Object> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> User Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(userId, fields, _callback);
        }


        /**
         * Execute getById request
         * @return UsersGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> User Not Found </td><td>  -  </td></tr>
         </table>
         */
        public UsersGetByIdResponse execute() throws ApiException {
            ApiResponse<UsersGetByIdResponse> localVarResp = getByIdWithHttpInfo(userId, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;UsersGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> User Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(userId, fields);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> User Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(userId, fields, _callback);
        }
    }

    /**
     * Get a User by Id
     * Retrieve a single User identified by its unique identifier.
     * @param userId  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> User Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetByIdRequestBuilder(userId);
    }
    private okhttp3.Call listExcludedFormerCall(String dtContractEnd, String dtContractStart, List<Object> id, String modifiedAt, String paging, List<Object> fields, String mail, String login, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dtContractEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dtContractEnd", dtContractEnd));
        }

        if (dtContractStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dtContractStart", dtContractStart));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (modifiedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedAt", modifiedAt));
        }

        if (paging != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paging", paging));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (mail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mail", mail));
        }

        if (login != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("login", login));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listExcludedFormerValidateBeforeCall(String dtContractEnd, String dtContractStart, List<Object> id, String modifiedAt, String paging, List<Object> fields, String mail, String login, Object body, final ApiCallback _callback) throws ApiException {
        return listExcludedFormerCall(dtContractEnd, dtContractStart, id, modifiedAt, paging, fields, mail, login, body, _callback);

    }


    private ApiResponse<UsersListExcludedFormerResponse> listExcludedFormerWithHttpInfo(String dtContractEnd, String dtContractStart, List<Object> id, String modifiedAt, String paging, List<Object> fields, String mail, String login, Object body) throws ApiException {
        okhttp3.Call localVarCall = listExcludedFormerValidateBeforeCall(dtContractEnd, dtContractStart, id, modifiedAt, paging, fields, mail, login, body, null);
        Type localVarReturnType = new TypeToken<UsersListExcludedFormerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listExcludedFormerAsync(String dtContractEnd, String dtContractStart, List<Object> id, String modifiedAt, String paging, List<Object> fields, String mail, String login, Object body, final ApiCallback<UsersListExcludedFormerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listExcludedFormerValidateBeforeCall(dtContractEnd, dtContractStart, id, modifiedAt, paging, fields, mail, login, body, _callback);
        Type localVarReturnType = new TypeToken<UsersListExcludedFormerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListExcludedFormerRequestBuilder {
        private String dtContractEnd;
        private String dtContractStart;
        private List<Object> id;
        private String modifiedAt;
        private String paging;
        private List<Object> fields;
        private String mail;
        private String login;

        private ListExcludedFormerRequestBuilder() {
        }

        /**
         * Set dtContractEnd
         * @param dtContractEnd &#x60;{comparator},{date-time}&#x60;.  (optional)
         * @return ListExcludedFormerRequestBuilder
         */
        public ListExcludedFormerRequestBuilder dtContractEnd(String dtContractEnd) {
            this.dtContractEnd = dtContractEnd;
            return this;
        }
        
        /**
         * Set dtContractStart
         * @param dtContractStart {comparator},{date-time} (optional)
         * @return ListExcludedFormerRequestBuilder
         */
        public ListExcludedFormerRequestBuilder dtContractStart(String dtContractStart) {
            this.dtContractStart = dtContractStart;
            return this;
        }
        
        /**
         * Set id
         * @param id User&#39;s identifier (optional)
         * @return ListExcludedFormerRequestBuilder
         */
        public ListExcludedFormerRequestBuilder id(List<Object> id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set modifiedAt
         * @param modifiedAt {comparator},{date-time} (optional)
         * @return ListExcludedFormerRequestBuilder
         */
        public ListExcludedFormerRequestBuilder modifiedAt(String modifiedAt) {
            this.modifiedAt = modifiedAt;
            return this;
        }
        
        /**
         * Set paging
         * @param paging {offset},{limit}. Defaults to 0,1000. (optional)
         * @return ListExcludedFormerRequestBuilder
         */
        public ListExcludedFormerRequestBuilder paging(String paging) {
            this.paging = paging;
            return this;
        }
        
        /**
         * Set fields
         * @param fields  (optional)
         * @return ListExcludedFormerRequestBuilder
         */
        public ListExcludedFormerRequestBuilder fields(List<Object> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set mail
         * @param mail User&#39;s mail (optional)
         * @return ListExcludedFormerRequestBuilder
         */
        public ListExcludedFormerRequestBuilder mail(String mail) {
            this.mail = mail;
            return this;
        }
        
        /**
         * Set login
         * @param login User&#39;s login (optional)
         * @return ListExcludedFormerRequestBuilder
         */
        public ListExcludedFormerRequestBuilder login(String login) {
            this.login = login;
            return this;
        }
        
        /**
         * Build call for listExcludedFormer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> User Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return listExcludedFormerCall(dtContractEnd, dtContractStart, id, modifiedAt, paging, fields, mail, login, body, _callback);
        }

        private Object buildBodyParams() {
            Object body = new Object();
            return body;
        }

        /**
         * Execute listExcludedFormer request
         * @return UsersListExcludedFormerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> User Not Found </td><td>  -  </td></tr>
         </table>
         */
        public UsersListExcludedFormerResponse execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<UsersListExcludedFormerResponse> localVarResp = listExcludedFormerWithHttpInfo(dtContractEnd, dtContractStart, id, modifiedAt, paging, fields, mail, login, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listExcludedFormer request with HTTP info returned
         * @return ApiResponse&lt;UsersListExcludedFormerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> User Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersListExcludedFormerResponse> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return listExcludedFormerWithHttpInfo(dtContractEnd, dtContractStart, id, modifiedAt, paging, fields, mail, login, body);
        }

        /**
         * Execute listExcludedFormer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> User Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersListExcludedFormerResponse> _callback) throws ApiException {
            Object body = buildBodyParams();
            return listExcludedFormerAsync(dtContractEnd, dtContractStart, id, modifiedAt, paging, fields, mail, login, body, _callback);
        }
    }

    /**
     * List Users
     * Retrieve a list of Users.  By default, former employees are excluded from the response. In order to retrieve them, you may add the &#x60;?dtContractEnd&#x3D;notequal,null&#x60; query parameter to your request. 
     * @return ListExcludedFormerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> User Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ListExcludedFormerRequestBuilder listExcludedFormer() throws IllegalArgumentException {
        return new ListExcludedFormerRequestBuilder();
    }
    private okhttp3.Call updateByIdCall(String userId, List<Object> fields, UsersUpdateByIdRequest usersUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersUpdateByIdRequest;

        // create path and map variables
        String localVarPath = "/api/v3/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(String userId, List<Object> fields, UsersUpdateByIdRequest usersUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateById(Async)");
        }

        return updateByIdCall(userId, fields, usersUpdateByIdRequest, _callback);

    }


    private ApiResponse<Void> updateByIdWithHttpInfo(String userId, List<Object> fields, UsersUpdateByIdRequest usersUpdateByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(userId, fields, usersUpdateByIdRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateByIdAsync(String userId, List<Object> fields, UsersUpdateByIdRequest usersUpdateByIdRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(userId, fields, usersUpdateByIdRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final String userId;
        private String firstName;
        private String lastName;
        private String mail;
        private String login;
        private Integer legalEntityId;
        private Integer cspId;
        private ModelNull calendarId;
        private String employeeNumber;
        private String birthDate;
        private List<UsersUpdateByIdRequestUserWorkCyclesInner> userWorkCycles;
        private Integer departmentId;
        private Integer managerId;
        private Integer rolePrincipalId;
        private List<UsersUpdateByIdRequestHabilitedRolesInner> habilitedRoles;
        private Integer cultureId;
        private String address;
        private String bankName;
        private String directLine;
        private String jobTitle;
        private String gender;
        private String nationality;
        private String personalEmail;
        private String personalMobile;
        private String professionalMobile;
        private String quote;
        private List<Object> fields;

        private UpdateByIdRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set firstName
         * @param firstName  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set mail
         * @param mail  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder mail(String mail) {
            this.mail = mail;
            return this;
        }
        
        /**
         * Set login
         * @param login  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder login(String login) {
            this.login = login;
            return this;
        }
        
        /**
         * Set legalEntityId
         * @param legalEntityId  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder legalEntityId(Integer legalEntityId) {
            this.legalEntityId = legalEntityId;
            return this;
        }
        
        /**
         * Set cspId
         * @param cspId  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder cspId(Integer cspId) {
            this.cspId = cspId;
            return this;
        }
        
        /**
         * Set calendarId
         * @param calendarId  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder calendarId(ModelNull calendarId) {
            this.calendarId = calendarId;
            return this;
        }
        
        /**
         * Set employeeNumber
         * @param employeeNumber  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder employeeNumber(String employeeNumber) {
            this.employeeNumber = employeeNumber;
            return this;
        }
        
        /**
         * Set birthDate
         * @param birthDate  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder birthDate(String birthDate) {
            this.birthDate = birthDate;
            return this;
        }
        
        /**
         * Set userWorkCycles
         * @param userWorkCycles  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder userWorkCycles(List<UsersUpdateByIdRequestUserWorkCyclesInner> userWorkCycles) {
            this.userWorkCycles = userWorkCycles;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder departmentId(Integer departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set managerId
         * @param managerId  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder managerId(Integer managerId) {
            this.managerId = managerId;
            return this;
        }
        
        /**
         * Set rolePrincipalId
         * @param rolePrincipalId  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder rolePrincipalId(Integer rolePrincipalId) {
            this.rolePrincipalId = rolePrincipalId;
            return this;
        }
        
        /**
         * Set habilitedRoles
         * @param habilitedRoles  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder habilitedRoles(List<UsersUpdateByIdRequestHabilitedRolesInner> habilitedRoles) {
            this.habilitedRoles = habilitedRoles;
            return this;
        }
        
        /**
         * Set cultureId
         * @param cultureId  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder cultureId(Integer cultureId) {
            this.cultureId = cultureId;
            return this;
        }
        
        /**
         * Set address
         * @param address  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder address(String address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set bankName
         * @param bankName  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder bankName(String bankName) {
            this.bankName = bankName;
            return this;
        }
        
        /**
         * Set directLine
         * @param directLine  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder directLine(String directLine) {
            this.directLine = directLine;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set gender
         * @param gender  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set nationality
         * @param nationality  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder nationality(String nationality) {
            this.nationality = nationality;
            return this;
        }
        
        /**
         * Set personalEmail
         * @param personalEmail  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder personalEmail(String personalEmail) {
            this.personalEmail = personalEmail;
            return this;
        }
        
        /**
         * Set personalMobile
         * @param personalMobile  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder personalMobile(String personalMobile) {
            this.personalMobile = personalMobile;
            return this;
        }
        
        /**
         * Set professionalMobile
         * @param professionalMobile  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder professionalMobile(String professionalMobile) {
            this.professionalMobile = professionalMobile;
            return this;
        }
        
        /**
         * Set quote
         * @param quote  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder quote(String quote) {
            this.quote = quote;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Fields of the user, comma separated (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder fields(List<Object> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersUpdateByIdRequest usersUpdateByIdRequest = buildBodyParams();
            return updateByIdCall(userId, fields, usersUpdateByIdRequest, _callback);
        }

        private UsersUpdateByIdRequest buildBodyParams() {
            UsersUpdateByIdRequest usersUpdateByIdRequest = new UsersUpdateByIdRequest();
            usersUpdateByIdRequest.firstName(this.firstName);
            usersUpdateByIdRequest.lastName(this.lastName);
            usersUpdateByIdRequest.mail(this.mail);
            usersUpdateByIdRequest.login(this.login);
            usersUpdateByIdRequest.legalEntityId(this.legalEntityId);
            usersUpdateByIdRequest.cspId(this.cspId);
            usersUpdateByIdRequest.calendarId(this.calendarId);
            usersUpdateByIdRequest.employeeNumber(this.employeeNumber);
            usersUpdateByIdRequest.birthDate(this.birthDate);
            usersUpdateByIdRequest.userWorkCycles(this.userWorkCycles);
            usersUpdateByIdRequest.departmentId(this.departmentId);
            usersUpdateByIdRequest.managerId(this.managerId);
            usersUpdateByIdRequest.rolePrincipalId(this.rolePrincipalId);
            usersUpdateByIdRequest.habilitedRoles(this.habilitedRoles);
            usersUpdateByIdRequest.cultureId(this.cultureId);
            usersUpdateByIdRequest.address(this.address);
            usersUpdateByIdRequest.bankName(this.bankName);
            usersUpdateByIdRequest.directLine(this.directLine);
            usersUpdateByIdRequest.jobTitle(this.jobTitle);
            usersUpdateByIdRequest.gender(this.gender);
            usersUpdateByIdRequest.nationality(this.nationality);
            usersUpdateByIdRequest.personalEmail(this.personalEmail);
            usersUpdateByIdRequest.personalMobile(this.personalMobile);
            usersUpdateByIdRequest.professionalMobile(this.professionalMobile);
            usersUpdateByIdRequest.quote(this.quote);
            return usersUpdateByIdRequest;
        }

        /**
         * Execute updateById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UsersUpdateByIdRequest usersUpdateByIdRequest = buildBodyParams();
            updateByIdWithHttpInfo(userId, fields, usersUpdateByIdRequest);
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UsersUpdateByIdRequest usersUpdateByIdRequest = buildBodyParams();
            return updateByIdWithHttpInfo(userId, fields, usersUpdateByIdRequest);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UsersUpdateByIdRequest usersUpdateByIdRequest = buildBodyParams();
            return updateByIdAsync(userId, fields, usersUpdateByIdRequest, _callback);
        }
    }

    /**
     * Update a User by id
     * Update fields of a single User identified by its unique id.
     * @param userId  (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new UpdateByIdRequestBuilder(userId);
    }
}
