/*
 * Directory-v3
 * Welcome on the documentation for the Directory v3 API. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developers@lucca.fr
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ModelNull;
import com.konfigthis.client.model.UsersCreateNewUserResponse;
import com.konfigthis.client.model.UsersGetByIdResponse;
import com.konfigthis.client.model.UsersListExcludedFormerResponse;
import com.konfigthis.client.model.UsersUpdateByIdRequest;
import com.konfigthis.client.model.UsersUpdateByIdRequestHabilitedRolesInner;
import com.konfigthis.client.model.UsersUpdateByIdRequestUserWorkCyclesInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private static UsersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UsersApi(apiClient);
    }

    /**
     * Create a new User
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewUserTest() throws ApiException {
        UsersCreateNewUserResponse response = api.createNewUser()
                .execute();
        // TODO: test validations
    }

    /**
     * Get a User by Id
     *
     * Retrieve a single User identified by its unique identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String userId = null;
        List<Object> fields = null;
        UsersGetByIdResponse response = api.getById(userId)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * List Users
     *
     * Retrieve a list of Users.  By default, former employees are excluded from the response. In order to retrieve them, you may add the &#x60;?dtContractEnd&#x3D;notequal,null&#x60; query parameter to your request. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listExcludedFormerTest() throws ApiException {
        String dtContractEnd = null;
        String dtContractStart = null;
        List<Object> id = null;
        String modifiedAt = null;
        String paging = null;
        List<Object> fields = null;
        String mail = null;
        String login = null;
        UsersListExcludedFormerResponse response = api.listExcludedFormer()
                .dtContractEnd(dtContractEnd)
                .dtContractStart(dtContractStart)
                .id(id)
                .modifiedAt(modifiedAt)
                .paging(paging)
                .fields(fields)
                .mail(mail)
                .login(login)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a User by id
     *
     * Update fields of a single User identified by its unique id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByIdTest() throws ApiException {
        String userId = null;
        String firstName = null;
        String lastName = null;
        String mail = null;
        String login = null;
        Integer legalEntityId = null;
        Integer cspId = null;
        ModelNull calendarId = null;
        String employeeNumber = null;
        String birthDate = null;
        List<UsersUpdateByIdRequestUserWorkCyclesInner> userWorkCycles = null;
        Integer departmentId = null;
        Integer managerId = null;
        Integer rolePrincipalId = null;
        List<UsersUpdateByIdRequestHabilitedRolesInner> habilitedRoles = null;
        Integer cultureId = null;
        String address = null;
        String bankName = null;
        String directLine = null;
        String jobTitle = null;
        String gender = null;
        String nationality = null;
        String personalEmail = null;
        String personalMobile = null;
        String professionalMobile = null;
        String quote = null;
        List<Object> fields = null;
        api.updateById(userId)
                .firstName(firstName)
                .lastName(lastName)
                .mail(mail)
                .login(login)
                .legalEntityId(legalEntityId)
                .cspId(cspId)
                .calendarId(calendarId)
                .employeeNumber(employeeNumber)
                .birthDate(birthDate)
                .userWorkCycles(userWorkCycles)
                .departmentId(departmentId)
                .managerId(managerId)
                .rolePrincipalId(rolePrincipalId)
                .habilitedRoles(habilitedRoles)
                .cultureId(cultureId)
                .address(address)
                .bankName(bankName)
                .directLine(directLine)
                .jobTitle(jobTitle)
                .gender(gender)
                .nationality(nationality)
                .personalEmail(personalEmail)
                .personalMobile(personalMobile)
                .professionalMobile(professionalMobile)
                .quote(quote)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

}
